// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime?    @updatedAt @map("updated_at")
  userId    String       @map("user_id")
  users     UserGroups[]

  @@map("group")
}

model User {
  id       String     @id @default(uuid())
  name     String
  email    String     @unique
  password String
  despesas Despesas[]
  rendas   Renda[]

  groups UserGroups[]

  @@map("users")
}

model UserGroups {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, groupId])
  @@map("user_groups")
}

model Despesas {
  id             String    @id @default(uuid())
  name           String
  data           DateTime?
  valor          Decimal
  dataVencimento DateTime?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  userId         String    @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("despesas")
}

model Renda {
  id        String    @id @default(uuid())
  name      String
  data      DateTime?
  valor     Decimal
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  userId    String    @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("rendas")
}
